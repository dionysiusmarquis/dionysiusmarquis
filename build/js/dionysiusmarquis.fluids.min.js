/* D I O N Y S I U S  M A R Q U I S */
"undefined"==typeof dm&&(dm=new Object),"undefined"==typeof dm.Fluids&&(dm.Fluids=new Object),dm.Fluids.Simulator=function(a){function b(a,b,c,i,j,k,l,n,o){i=i?i*A.sampling:0,j=j?-j*A.sampling:0,k=k?k*A.sampling:c.image.width*A.sampling,l=l?l*A.sampling:c.image.height*A.sampling;var p,q=k/A.width,r=l/A.height,s=i/A.width*2+(q-1),t=j/A.height*2+(1-r);n?(p=w.clone(),p.uniforms.tDiffuse.value=c,p.uniforms.color.value=n,A.blendImpulse?p.uniforms.premultiplied.value=1:p.uniforms.premultiplied.value=0):A.blendImpulse?(p=new THREE.MeshBasicMaterial,p.map=c):(p=y.clone(),p.uniforms.tDiffuse.value=c),p.transparent=!0;var u=new THREE.Mesh(h,p);u.userData=a,u.scale.set(q,r,1),u.position.set(s,t,0);var v,x;switch(b){case"impulsedensity":o?(u.renderOrder=2,p.blending=THREE.AdditiveBlending):A.blendImpulse&&(p.blending=THREE.CustomBlending,p.blendSrc=THREE.SrcAlphaFactor,p.blendDst=THREE.OneMinusSrcAlphaFactor,p.blendEquation=THREE.AddEquation),v=d;break;case"impulsetemperature":v=e;break;case"obstacle":v=f,x=m.obstacles.texture;break;default:console.error("Wrong type specified.")}if(a){var B=z.getObject(a,v);B&&v.remove(B)}return v.add(u),x&&z.render(v,g,x),u}THREE.WebGLRenderer.call(this,{antialiasing:!1,alpha:!0,premultipliedAlpha:!0});var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z=this,A=this.settings=new dm.Fluids.Settings,B=(new Date).getTime();this.impulseObjects=new Array,this.obstacleObjects=new Array,this.applyCircleImpulse=!1,this.applyTextureImpulse=!1,this.autoClearImpulse=!1,this.autoClearObstacles=!1,this.isInitialized=!1,this.isSupported=Detector.webgl&&this.supportsHalfFloatTextures(),this.getObject=function(a,b){var c;for(c=0;c<b.children.length;c++)if(b.children[c].userData==a)return b.children[c]},this.getObjectIndex=function(a,b){var c;for(c=0;c<b.children.length;c++)if(b.children[c].userData==a)return c},this.addCircleImpulse=function(a,b,c,d,e,f){return},this.addBoundary=function(){u.uniforms.Boundary.value=[A.boundaryTop,A.boundaryRight,A.boundaryBottom,A.boundaryLeft];var a=new THREE.Mesh(h,u);a.userData="boundary",f.add(a)},this.addObstacle=function(a,c,d,e,f,g,h){b(a,"obstacle",c,d,e,f,g,h)},this.addImpulse=function(a,c,d,e,f,g,h,i){b(a,"impulsedensity",c,d,e,f,g,i),b(a,"impulsetemperature",c,d,e,f,g,h||new THREE.Vector4(A.impulseTemperature.x,A.impulseTemperature.y,A.impulseTemperature.z,1))},this.addImpulseOverlay=function(a,c,d,e,f,g,h,i){b(a,"impulsedensity",c,d,e,f,g,i,!0),b(a,"impulsetemperature",c,d,e,f,g,h||new THREE.Vector4(A.impulseTemperature.x,A.impulseTemperature.y,A.impulseTemperature.z,1),!0)},this.clearImpulse=function(a){a=a||new Array;for(var b,c=0;d.children.length>c;)b=d.children[c],"density"!=b.userData&&-1==a.indexOf(b.userData)?d.remove(b):c++;for(c=0;e.children.length>c;)b=e.children[c],"temperature"!=b.userData&&-1==a.indexOf(b.userData)?e.remove(b):c++},this.clearObstacles=function(a){a=a||new Array;for(var b,c=0;f.children.length>c;)b=f.children[c],"boundary"!=b.userData&&-1==a.indexOf(b.userData)?f.remove(b):c++;this.render(f,g,m.obstacles.texture)},this.init=function(a,b,B){this.isInitialized=!0,this.isSupported&&(a=a||this.domElement.width,b=b||this.domElement.height,A.setSize(a,b),m=new dm.Fluids.Textures(A),c=new THREE.Scene,d=new THREE.Scene,e=new THREE.Scene,f=new THREE.Scene,g=new THREE.OrthographicCamera(-1,1,1,-1,0,1),h=new THREE.PlaneBufferGeometry(2,2),i=new THREE.Mesh(h,null),l=new THREE.MeshBasicMaterial,i.material=l,o=new dm.Fluids.ShaderMaterials.Advect(A,m),p=new dm.Fluids.ShaderMaterials.Buoyancy(A,m),q=new dm.Fluids.ShaderMaterials.ApplyImpulse(A,m),r=new dm.Fluids.ShaderMaterials.ComputeDivergence(A,m),s=new dm.Fluids.ShaderMaterials.Jacobi(A,m),t=new dm.Fluids.ShaderMaterials.SubtractGradient(A,m),u=new dm.Fluids.ShaderMaterials.Boundary(A,m),v=new dm.Fluids.ShaderMaterials.Vignette(A,m),w=new THREE.ShaderMaterial(dm.ShaderLib.OverrideColor),x=new THREE.ShaderMaterial(dm.ShaderLib.PremultiplyAlpha),y=new THREE.ShaderMaterial(dm.ShaderLib.UnpremultiplyAlpha),n=[o,p,q,r,s,t,u,v],this.clearTarget(m.density.texture),this.clearTarget(m.temperature.texture),this.clearTarget(m.obstacles.texture),c.add(i),j=new THREE.Mesh(h,y.clone()),j.renderOrder=1,j.userData="density",j.material.transparent=!0,d.add(j),k=new THREE.Mesh(h,y.clone()),k.renderOrder=1,k.userData="temperature",k.material.transparent=!0,e.add(k),z.addBoundary(),B!==!1&&this.setSize(a,b))},this.simulate=function(a){if(this.isInitialized){var b=(new Date).getTime()-B;if(!a&&-1!=A.fps&&b<1e3/A.fps)return!1;i.material=o,o.uniforms.VelocityTexture.value=m.velocity.texture,o.uniforms.SourceTexture.value=m.velocity.texture,o.uniforms.Dissipation.value=A.velocityDissipation,this.render(c,g,m.velocity.texture2),m.velocity.swapTexture(),o.uniforms.VelocityTexture.value=m.velocity.texture,o.uniforms.SourceTexture.value=m.temperature.texture,o.uniforms.Dissipation.value=A.temperatureDissipation,this.render(c,g,m.temperature.texture2),m.temperature.swapTexture(),o.uniforms.VelocityTexture.value=m.velocity.texture,o.uniforms.SourceTexture.value=m.density.texture,o.uniforms.Dissipation.value=A.densityDissipation,this.render(c,g,m.density.texture2),m.density.swapTexture(),i.material=p,p.uniforms.Velocity.value=m.velocity.texture,p.uniforms.Temperature.value=m.temperature.texture,p.uniforms.Density.value=m.density.texture,p.uniforms.Sigma.value=A.invertBuoyancy?-A.smokeBuoyancy:A.smokeBuoyancy,p.uniforms.Kappa.value=A.smokeWeight,this.render(c,g,m.velocity.texture2),m.velocity.swapTexture(),this.applyCircleImpulse&&(i.material=q,q.uniforms.Sampler.value=m.temperature.texture,q.uniforms.FillColor.value=A.circleImpulseTemperature||A.impulseTemperature,q.uniforms.Radius.value=A.circleImpulseRadius,this.render(c,g,m.temperature.texture2),m.temperature.swapTexture(),q.uniforms.Sampler.value=m.density.texture,q.uniforms.FillColor.value=A.circleImpulseDensity||A.impulseDensity,i.material=q,this.render(c,g,m.density.texture2),m.density.swapTexture()),this.applyTextureImpulse&&d.children.length>1&&(k.material.uniforms.tDiffuse.value=m.temperature.texture,this.render(e,g,m.temperature.texture2),m.temperature.swapTexture(),j.material.uniforms.tDiffuse.value=m.density.texture,this.render(d,g,m.density.texture2),m.density.swapTexture()),i.material=r,r.uniforms.Obstacles.value=m.obstacles.texture,r.uniforms.Velocity.value=m.velocity.texture,this.render(c,g,m.divergence.texture),i.material=s,s.uniforms.Obstacles.value=m.obstacles.texture,this.clearTarget(m.pressure.texture1,!0,!0,!0);var f;for(f=0;f<A.numJacobiIterations;f++)s.uniforms.Pressure.value=m.pressure.texture,this.render(c,g,m.pressure.texture2,0===f),m.pressure.swapTexture();return i.material=t,t.uniforms.Obstacles.value=m.obstacles.texture,t.uniforms.Velocity.value=m.velocity.texture,t.uniforms.Pressure.value=m.pressure.texture,this.render(c,g,m.velocity.texture2),m.velocity.swapTexture(),A.enableVignette?(i.material=v,v.uniforms.tDiffuse.value=m.density.texture):(i.material=l,l.map=m.density.texture),this.render(c,g),this.autoClearImpulse&&this.clearImpulse(),this.autoClearObstacles&&this.clearObstacles(),B=(new Date).getTime(),!0}},this.setSize=function(a,b,c){if(c||this.domElement.width!=a||this.domElement.height!=b){this.domElement.width=a,this.domElement.height=b,this.domElement.style.width=a+"px",this.domElement.style.height=b+"px",this.setViewport(0,0,a,b),A.setSize(a,b),this.isInitialized||this.init(a,b,!1),m.update();var d,e;for(d=n.length-1;d>=0;d--)e=n[d],e.update(A,m);this.clearTarget(m.density.texture),this.clearTarget(m.temperature.texture),this.clearTarget(m.obstacles.texture)}},this.setSampling=function(a){A.sampling=a,this.setSize(A.originWidth,A.originHeight,!0),this.render(f,g,m.obstacles.texture)}},dm.Fluids.Simulator.prototype=Object.create(THREE.WebGLRenderer.prototype),"undefined"==typeof dm&&(dm=new Object),"undefined"==typeof dm.Fluids&&(dm.Fluids=new Object),dm.Fluids.Settings=function(){this.fps=-1,this.sampling=1,this.cellSize=1.25,this.width=500,this.height=500,this.originWidth=500,this.originHeight=500,this.gridWidth=250,this.gridHeight=250,this.boundaryTop=-1,this.boundaryRight=-1,this.boundaryBottom=-1,this.boundaryLeft=-1,this.obstacleThreshold=.001,this.enableVignette=!1,this.vignetteSize=1,this.vignetteSoftness=1,this.vignetteScale=new THREE.Vector2(1,1),this.vignetteOffset=new THREE.Vector2(0,0),this.vignetteDebug=!1,this.ambientTemperature=0,this.blendImpulse=!0,this.impulseTemperature=new THREE.Vector4(14,14,14,1),this.impulseDensity=new THREE.Vector4(1,1,1,1),this.impulseDensityColor=[255,255,255],this.numJacobiIterations=15,this.timeStep=.125,this.smokeBuoyancy=1,this.invertBuoyancy=!1,this.smokeWeight=.005,this.gradientScale=1.125/this.cellSize,this.temperatureDissipation=.99,this.velocityDissipation=.99,this.densityDissipation=.99,this.circleImpulseRadius=20,this.circleImpulsePosition=new THREE.Vector2(this.width/2,this.splatRadius),this.circleImpulseTemperature=null,this.circleImpulseDensity=null,this.inverseSize=new THREE.Vector2(1/this.width,1/this.height),this.linearFloatParams={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,type:THREE.HalfFloatType},this.setSize=function(a,b){this.originWidth=a,this.originHeight=b,a*=this.sampling,b*=this.sampling,a=Math.round(a),b=Math.round(b),this.width=a,this.height=b,this.gridWidth=Math.round(a/2),this.gridHeight=Math.round(b/2),this.circleImpulsePosition.x=a/2,this.inverseSize.x=1/a,this.inverseSize.y=1/b},this.setSampling=function(a){this.sampling=a,this.setSize(this.originWidth,this.originHeight)}},"undefined"==typeof dm&&(dm=new Object),"undefined"==typeof dm.Fluids&&(dm.Fluids=new Object),dm.Fluids.ShaderMaterials=new Object,dm.Fluids.ShaderMaterials.Advect=function(a,b){THREE.ShaderMaterial.call(this,dm.Fluids.Shaders.Advect),this.update=function(a,b){this.uniforms.VelocityTexture.value=b.velocity.texture,this.uniforms.SourceTexture.value=b.velocity.texture,this.uniforms.Obstacles.value=b.obstacles.texture,this.uniforms.InverseSize.value=a.inverseSize,this.uniforms.TimeStep.value=a.timeStep,this.uniforms.Dissipation.value=a.velocityDissipation,this.uniforms.ObstacleThreshold.value=a.obstacleThreshold},this.update(a,b)},dm.Fluids.ShaderMaterials.Advect.prototype=Object.create(THREE.ShaderMaterial.prototype),dm.Fluids.ShaderMaterials.Buoyancy=function(a,b){THREE.ShaderMaterial.call(this,dm.Fluids.Shaders.Buoyancy),this.update=function(a,b){this.uniforms.Velocity.value=b.velocity.texture,this.uniforms.Temperature.value=b.temperature.texture,this.uniforms.Density.value=b.density.texture,this.uniforms.AmbientTemperature.value=a.ambientTemperature,this.uniforms.TimeStep.value=a.timeStep,this.uniforms.Sigma.value=a.smokeBuoyancy,this.uniforms.Kappa.value=a.smokeWeight},this.update(a,b)},dm.Fluids.ShaderMaterials.Buoyancy.prototype=Object.create(THREE.ShaderMaterial.prototype),dm.Fluids.ShaderMaterials.ApplyImpulse=function(a,b){THREE.ShaderMaterial.call(this,dm.Fluids.Shaders.Splat),this.update=function(a,b){this.uniforms.Sampler.value=b.density.texture,this.uniforms.Point.value=a.circleImpulsePosition,this.uniforms.Radius.value=a.splatRadius,this.uniforms.FillColor.value=a.impulseTemperature},this.update(a,b)},dm.Fluids.ShaderMaterials.ApplyImpulse.prototype=Object.create(THREE.ShaderMaterial.prototype),dm.Fluids.ShaderMaterials.ComputeDivergence=function(a,b){THREE.ShaderMaterial.call(this,dm.Fluids.Shaders.ComputeDivergence),this.update=function(a,b){this.uniforms.Velocity.value=b.velocity.texture,this.uniforms.Obstacles.value=b.obstacles.texture,this.uniforms.InverseSize.value=a.inverseSize,this.uniforms.HalfInverseCellSize.value=.5/a.cellSize,this.uniforms.ObstacleThreshold.value=a.obstacleThreshold},this.update(a,b)},dm.Fluids.ShaderMaterials.ComputeDivergence.prototype=Object.create(THREE.ShaderMaterial.prototype),dm.Fluids.ShaderMaterials.Jacobi=function(a,b){THREE.ShaderMaterial.call(this,dm.Fluids.Shaders.Jacobi),this.update=function(a,b){this.uniforms.Pressure.value=b.pressure.texture,this.uniforms.Divergence.value=b.divergence.texture,this.uniforms.Obstacles.value=b.obstacles.texture,this.uniforms.InverseSize.value=a.inverseSize,this.uniforms.Alpha.value=-a.cellSize*a.cellSize,this.uniforms.InverseBeta.value=.25,this.uniforms.ObstacleThreshold.value=a.obstacleThreshold},this.update(a,b)},dm.Fluids.ShaderMaterials.Jacobi.prototype=Object.create(THREE.ShaderMaterial.prototype),dm.Fluids.ShaderMaterials.SubtractGradient=function(a,b){THREE.ShaderMaterial.call(this,dm.Fluids.Shaders.SubtractGradient),this.update=function(a,b){this.uniforms.Velocity.value=b.velocity.texture,this.uniforms.Pressure.value=b.pressure.texture,this.uniforms.Obstacles.value=b.obstacles.texture,this.uniforms.InverseSize.value=a.inverseSize,this.uniforms.GradientScale.value=a.gradientScale,this.uniforms.ObstacleThreshold.value=a.obstacleThreshold},this.update(a,b)},dm.Fluids.ShaderMaterials.SubtractGradient.prototype=Object.create(THREE.ShaderMaterial.prototype),dm.Fluids.ShaderMaterials.Boundary=function(a,b){THREE.ShaderMaterial.call(this,dm.Fluids.Shaders.Boundary),this.update=function(a,b){this.uniforms.Color.value=new THREE.Vector4(0,0,0,1),this.uniforms.Boundary.value=[a.boundaryTop,a.boundaryRight,a.boundaryBottom,a.boundaryLeft],this.uniforms.InverseSize.value=a.inverseSize},this.update(a,b)},dm.Fluids.ShaderMaterials.Boundary.prototype=Object.create(THREE.ShaderMaterial.prototype),dm.Fluids.ShaderMaterials.Vignette=function(a,b){THREE.ShaderMaterial.call(this,dm.ShaderLib.Vignette),this.update=function(a,b){this.uniforms.tDiffuse.value=b.density.texture,this.uniforms.size.value=a.vignetteSize,this.uniforms.softness.value=a.vignetteSoftness,this.uniforms.scale.value=a.vignetteScale,this.uniforms.offset.value=a.vignetteOffset,this.uniforms.debug.value=a.vignetteDebug},this.update(a,b)},dm.Fluids.ShaderMaterials.Vignette.prototype=Object.create(THREE.ShaderMaterial.prototype),dm.Fluids.ShaderMaterials.Visualize=function(a,b){THREE.ShaderMaterial.call(this,dm.Fluids.Shaders.Visualize),this.update=function(a,b){this.uniforms.Sampler.value=b.density.texture,this.uniforms.FillColor.value=new THREE.Vector3(1,1,1)},this.update(a,b)},dm.Fluids.ShaderMaterials.Visualize.prototype=Object.create(THREE.ShaderMaterial.prototype),"undefined"==typeof dm&&(dm=new Object),"undefined"==typeof dm.Fluids&&(dm.Fluids=new Object),dm.Fluids.Shaders=new Object,dm.Fluids.Shaders.Advect={uniforms:THREE.UniformsUtils.merge([{VelocityTexture:{type:"t",value:null},SourceTexture:{type:"t",value:null},Obstacles:{type:"t",value:null},InverseSize:{type:"v2",value:new THREE.Vector2(0,0)},TimeStep:{type:"f",value:-1},Dissipation:{type:"f",value:-1},ObstacleThreshold:{type:"f",value:-1}}]),vertexShader:["varying vec2 vUv;","void main()	{","    vUv = uv;","	gl_Position = vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D VelocityTexture;","uniform sampler2D SourceTexture;","uniform sampler2D Obstacles;","uniform vec2 InverseSize;","uniform float TimeStep;","uniform float Dissipation;","uniform float ObstacleThreshold;","varying vec2 vUv;","void main()","{","    float solid = texture2D(Obstacles, vUv).a;","    ","    if (solid >= ObstacleThreshold) {","        gl_FragColor = vec4(0.0);","        return;","    }","    ","    vec2 u = texture2D(VelocityTexture, vUv).xy;","    vec2 coord = InverseSize * (gl_FragCoord.xy - TimeStep * u);","    gl_FragColor = Dissipation * texture2D(SourceTexture, coord);","}"].join("\n")},dm.Fluids.Shaders.Boundary={uniforms:THREE.UniformsUtils.merge([{Color:{type:"v4",value:new THREE.Vector4(0,0,0,0)},Boundary:{type:"fv1",value:[]},InverseSize:{type:"v2",value:new THREE.Vector2(0,0)}}]),vertexShader:["varying vec2 vUv;","void main()	{","    vUv = uv;","	gl_Position = vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["// uniform_ sampler2D Sampler;","uniform vec4 Color;","uniform float Boundary[4];","uniform vec2 InverseSize;","varying vec2 vUv;","void main()","{","	// vec4 outColor = texture2D(Sampler, vUv);","	float bbN = 1.0 - Boundary[0] * InverseSize.y;","	float bbS = Boundary[2] * InverseSize.y;","	float bbE = 1.0 - Boundary[1] * InverseSize.x;","	float bbW = Boundary[3] * InverseSize.x;","    // gl_FragColor = vUv.y > bbN || vUv.y < bbS || vUv.x > bbE || vUv.x < bbW ? mix(outColor, Color, Color.a) : outColor;","    gl_FragColor = vUv.y > bbN || vUv.y < bbS || vUv.x > bbE || vUv.x < bbW ? vec4(Color.rgb * Color.a, Color.a) : vec4(0.0);","}"].join("\n")},dm.Fluids.Shaders.Buoyancy={uniforms:THREE.UniformsUtils.merge([{Velocity:{type:"t",value:null},Temperature:{type:"t",value:null},Density:{type:"t",value:null},AmbientTemperature:{type:"f",value:-1},TimeStep:{type:"f",value:-1},Sigma:{type:"f",value:-1},Kappa:{type:"f",value:-1}}]),vertexShader:["varying vec2 vUv;","void main()	{","    vUv = uv;","	gl_Position = vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D Velocity;","uniform sampler2D Temperature;","uniform sampler2D Density;","uniform float AmbientTemperature;","uniform float TimeStep;","uniform float Sigma;","uniform float Kappa;","varying vec2 vUv;","void main()","{","    float T = texture2D(Temperature, vUv).r;","    vec2 V = texture2D(Velocity, vUv).xy;","    vec2 outColor = V;","    if (T > AmbientTemperature) {","        float D = texture2D(Density, vUv).x;","        outColor += (TimeStep * (T - AmbientTemperature) * Sigma - D * Kappa ) * vec2(0.0, 1.0);","    }","    ","    gl_FragColor = vec4(outColor, 0.0, 1.0);","}"].join("\n")},dm.Fluids.Shaders.ComputeDivergence={uniforms:THREE.UniformsUtils.merge([{Velocity:{type:"t",value:null},Obstacles:{type:"t",value:null},InverseSize:{type:"v2",value:new THREE.Vector2(0,0)},HalfInverseCellSize:{type:"f",value:-1},ObstacleThreshold:{type:"f",value:-1}}]),vertexShader:["void main()	{","	gl_Position = vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D Velocity;","uniform sampler2D Obstacles;","uniform vec2 InverseSize;","uniform float HalfInverseCellSize;","uniform float ObstacleThreshold;","void main()","{","    vec2 fragCoord = gl_FragCoord.xy;","    ","    // vec2 c = fragCoord * InverseSize;","    vec2 cN = (fragCoord + vec2(0.0, 1.0)) * InverseSize;","    vec2 cS = (fragCoord + vec2(0.0, -1.0)) * InverseSize;","    vec2 cE = (fragCoord + vec2(1.0, 0.0)) * InverseSize;","    vec2 cW = (fragCoord + vec2(-1.0, 0.0)) * InverseSize;","    ","    // Find neighboring obstacles:","    vec4 oN = texture2D(Obstacles, cN);","    vec4 oS = texture2D(Obstacles, cS);","    vec4 oE = texture2D(Obstacles, cE);","    vec4 oW = texture2D(Obstacles, cW);","    ","    // Find neighboring velocities:","    vec2 vN;","    vec2 vS;","    vec2 vE;","    vec2 vW;","    if(oN.a >= ObstacleThreshold) vN = oN.rg; else vN = texture2D(Velocity, cN).rg;","    if(oS.a >= ObstacleThreshold) vS = oS.rg; else vS = texture2D(Velocity, cS).rg;","    if(oE.a >= ObstacleThreshold) vE = oE.rg; else vE = texture2D(Velocity, cE).rg;","    if(oW.a >= ObstacleThreshold) vW = oW.rg; else vW = texture2D(Velocity, cW).rg;","    gl_FragColor = vec4(HalfInverseCellSize * (vE.r - vW.r + vN.g - vS.g));","  }"].join("\n")},dm.Fluids.Shaders.Jacobi={uniforms:THREE.UniformsUtils.merge([{Pressure:{type:"t",value:null},Divergence:{type:"t",value:null},Obstacles:{type:"t",value:null},InverseSize:{type:"v2",value:new THREE.Vector2(0,0)},Alpha:{type:"f",value:-1},InverseBeta:{type:"f",value:-1},ObstacleThreshold:{type:"f",value:-1}}]),vertexShader:["varying vec2 vUv;","void main()	{","    vUv = uv;","	gl_Position = vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D Pressure;","uniform sampler2D Divergence;","uniform sampler2D Obstacles;","uniform vec2 InverseSize;","uniform float Alpha;","uniform float InverseBeta;","uniform float ObstacleThreshold;","varying vec2 vUv;","void main()","{","    vec2 fragCoord = gl_FragCoord.xy;","    ","    vec2 cN = (fragCoord + vec2(0.0, 1.0)) * InverseSize;","    vec2 cS = (fragCoord + vec2(0.0, -1.0)) * InverseSize;","    vec2 cE = (fragCoord + vec2(1.0, 0.0)) * InverseSize;","    vec2 cW = (fragCoord + vec2(-1.0, 0.0)) * InverseSize;","    ","    // Find neighboring obstacles:","    vec4 oN = texture2D(Obstacles, cN);","    vec4 oS = texture2D(Obstacles, cS);","    vec4 oE = texture2D(Obstacles, cE);","    vec4 oW = texture2D(Obstacles, cW);","    ","    // Find neighboring pressure:","    vec4 pN;","    vec4 pS;","    vec4 pE;","    vec4 pW;","    ","    // Use center pressure for solid cells:","    vec4 pC = texture2D(Pressure, vUv);","    if(oN.a >= ObstacleThreshold) pN = pC; else pN = texture2D(Pressure, cN); ","    if(oS.a >= ObstacleThreshold) pS = pC; else pS = texture2D(Pressure, cS); ","    if(oE.a >= ObstacleThreshold) pE = pC; else pE = texture2D(Pressure, cE); ","    if(oW.a >= ObstacleThreshold) pW = pC; else pW = texture2D(Pressure, cW); ","    float bC = texture2D(Divergence, vUv).x;","    gl_FragColor = vec4((pW + pE + pN + pS + Alpha * bC) * InverseBeta);","}"].join("\n")},dm.Fluids.Shaders.Splat={uniforms:THREE.UniformsUtils.merge([{Sampler:{type:"t",value:null},Point:{type:"v2",value:new THREE.Vector2(0,0)},Radius:{type:"f",value:-1},FillColor:{type:"v4",value:new THREE.Vector4(0,0,0,0)}}]),vertexShader:["varying vec2 vUv;","void main()	{","    vUv = uv;","	gl_Position = vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D Sampler;","uniform vec2 Point;","uniform float Radius;","uniform vec4 FillColor;","varying vec2 vUv;","void main()","{","    float d = distance(Point, gl_FragCoord.xy);","    vec4 color = texture2D(Sampler, vUv);","    ","    if (d < Radius) {","        float a = (Radius - d) * 0.5;","        gl_FragColor = vec4(FillColor.rgb * FillColor.a, FillColor.a); ","    } ","    else {","        gl_FragColor = color;","        // gl_FragColor = vec4(0.0);","    }","}"].join("\n")},dm.Fluids.Shaders.SubtractGradient={uniforms:THREE.UniformsUtils.merge([{Velocity:{type:"t",value:null},Pressure:{type:"t",value:null},Obstacles:{type:"t",value:null},InverseSize:{type:"v2",value:new THREE.Vector2(0,0)},GradientScale:{type:"f",value:-1},ObstacleThreshold:{type:"f",value:-1}}]),vertexShader:["varying vec2 vUv;","void main()	{","    vUv = uv;","	gl_Position = vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D Velocity;","uniform sampler2D Pressure;","uniform sampler2D Obstacles;","uniform vec2 InverseSize;","uniform float GradientScale;","uniform float ObstacleThreshold;","varying vec2 vUv;","void main()","{","   vec2 fragCoord = gl_FragCoord.xy;","    ","    vec2 cN = (fragCoord + vec2(0.0, 1.0)) * InverseSize;","    vec2 cS = (fragCoord + vec2(0.0, -1.0)) * InverseSize;","    vec2 cE = (fragCoord + vec2(1.0, 0.0)) * InverseSize;","    vec2 cW = (fragCoord + vec2(-1.0, 0.0)) * InverseSize;","    // Find neighboring obstacles:","    vec4 oN = texture2D(Obstacles, cN);","    vec4 oS = texture2D(Obstacles, cS);","    vec4 oE = texture2D(Obstacles, cE);","    vec4 oW = texture2D(Obstacles, cW);","    ","    // Find neighboring pressure:","    float pN;","    float pS;","    float pE;","    float pW;","    ","    // Use center pressure for solid cells:","    vec2 obstV = vec2(0.0);","    vec2 vMask = vec2(1.0);","    float pC = texture2D(Pressure, vUv).r;","    if(oN.a >= ObstacleThreshold) { pN = pC; obstV.g = oN.b; vMask.g = 0.0; } else pN = texture2D(Pressure, cN).r;","    if(oS.a >= ObstacleThreshold) { pS = pC; obstV.g = oS.b; vMask.g = 0.0; } else pS = texture2D(Pressure, cS).r; ","    if(oE.a >= ObstacleThreshold) { pE = pC; obstV.r = oE.g; vMask.r = 0.0; } else pE = texture2D(Pressure, cE).r; ","    if(oW.a >= ObstacleThreshold) { pW = pC; obstV.r = oW.g; vMask.r = 0.0; } else pW = texture2D(Pressure, cW).r; ","    // Enforce the free-slip boundary condition:","    vec2 oldV = texture2D(Velocity, vUv).rg;","    vec2 grad = vec2(pE - pW, pN - pS) * GradientScale;","    vec2 newV = oldV - grad;","    gl_FragColor = vec4((vMask * newV) + obstV, 0.0, 1.0);","}"].join("\n")},dm.Fluids.Shaders.Visualize={uniforms:THREE.UniformsUtils.merge([{Sampler:{type:"t",value:null},FillColor:{type:"v3",value:new THREE.Vector3(0,0,0)}}]),vertexShader:["varying vec2 vUv;","void main()	{","    vUv = uv;","	gl_Position = vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D Sampler;","uniform vec3 FillColor;","varying vec2 vUv;","void main()","{","  float L = texture2D(Sampler, vUv).r;","  gl_FragColor = vec4(FillColor, L);","}"].join("\n")},"undefined"==typeof dm&&(dm=new Object),"undefined"==typeof dm.Fluids&&(dm.Fluids=new Object),dm.Fluids.Texture=function(a){var b=new THREE.WebGLRenderTarget(a.width,a.height,a.linearFloatParams);this.texture=b,this.setSize=function(a,c){b=b.clone(),b.setSize(a,c),this.texture=b},this.update=function(){this.setSize(a.width,a.height)}},dm.Fluids.SwappableTexture=function(a){var b=!1,c=new THREE.WebGLRenderTarget(a.width,a.height,a.linearFloatParams),d=new THREE.WebGLRenderTarget(a.width,a.height,a.linearFloatParams);this.texture=c,this.texture2=d,this.swapTexture=function(){b=!b,b?(this.texture=d,this.texture2=c):(this.texture=c,this.texture2=d)},this.setSize=function(a,e){c=c.clone(),c.setSize(a,e),d=d.clone(),d.setSize(a,e),b?(this.texture=d,this.texture2=c):(this.texture=c,this.texture2=d)},this.update=function(){this.setSize(a.width,a.height)}},dm.Fluids.Textures=function(a){this.velocity=new dm.Fluids.SwappableTexture(a),this.density=new dm.Fluids.SwappableTexture(a),this.pressure=new dm.Fluids.SwappableTexture(a),this.temperature=new dm.Fluids.SwappableTexture(a),this.obstacles=new dm.Fluids.Texture(a),this.divergence=new dm.Fluids.Texture(a),this.update=function(){this.velocity.update(),this.density.update(),this.pressure.update(),this.temperature.update(),this.obstacles.update(),this.divergence.update()}},"undefined"==typeof dm&&(dm=new Object),"undefined"==typeof dm.Fluids&&(dm.Fluids=new Object);